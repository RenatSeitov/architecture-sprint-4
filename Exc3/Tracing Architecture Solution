### Архитектурное решение по трейсингу

#### **Мотивация**

В текущей системе часто возникают проблемы с заказами, такие как их зависание на разных этапах обработки или потеря сообщений между сервисами. Эти проблемы приводят к:
1. Замедлению выполнения заказов и ухудшению пользовательского опыта.
2. Увеличению времени на ручной разбор причин неисправностей.
3. Потере доверия со стороны клиентов.

Внедрение трейсинга позволит:
- Отслеживать полную историю прохождения заказа через все сервисы системы.
- Выявлять узкие места и точки отказа.
- Уменьшить время на диагностику и исправление ошибок.
- Улучшить согласованность между командами благодаря прозрачной информации о статусах заказов.

Технические и бизнес-метрики, которые улучшатся благодаря трейсингу:
1. **Среднее время обработки заказа (Technical):** Сокращение времени благодаря быстрому выявлению зависаний.
2. **Процент успешных заказов (Business):** Увеличение числа успешно завершённых заказов.
3. **Среднее время диагностики проблем (Technical):** Сокращение времени, затрачиваемого на разбор инцидентов.
4. **Удовлетворённость клиентов (Business):** Повышение NPS за счёт улучшения опыта пользователей.
5. **Количество потерянных сообщений (Technical):** Снижение числа потерянных сообщений между сервисами.

---

#### **Покрываемые системы и ключевые точки трейсинга**

На основании анализа системы компании и C4-диаграммы, трейсингом должны быть покрыты следующие системы:
1. **Shop API:** Точка входа заказов, фиксация состояния заказов (INITIATED, FILE_UPLOADED, SUBMITTED).
2. **CRM API:** Обработка заказов, изменения статуса (MANUFACTURING_APPROVED, CLOSED).
3. **MES API:** Управление производственными процессами, изменения статуса (PRICE_CALCULATED, MANUFACTURING_STARTED, MANUFACTURING_COMPLETED, PACKAGING, SHIPPED).
4. **RabbitMQ:** Отслеживание сообщений между компонентами (проверка отправки и получения).
5. **3D Files Storage:** Контроль загрузки и обработки файлов заказов.

---

#### **Данные, попадающие в трейсинг**

Для трейсинга необходимо собирать следующие данные:
- **Идентификатор заказа:** Уникальный ID для отслеживания по всей системе.
- **Таймстемпы:** Время поступления заказа в каждую систему и изменения его статусов.
- **Статусы заказов:** Текущий и предыдущий статусы.
- **Ошибки:** Коды ошибок и описание, если статус заказа не изменён успешно.
- **ID сообщений (RabbitMQ):** Уникальный идентификатор каждого сообщения для выявления потерь.
- **Путь обработки:** Последовательность сервисов, через которые прошёл заказ.
- **Метаданные:** Дополнительная информация, например, размер загруженного файла, параметры заказа.

---

#### **Предлагаемое решение**

##### **Технологии для реализации трейсинга:**
1. **OpenTelemetry:** Сбор трейсинг-данных из всех приложений.
2. **Jaeger или Zipkin:** Визуализация и хранение трейсингов.
3. **Elasticsearch + Kibana:** Для централизованного хранения логов и визуализации.
4. **RabbitMQ плагин для трейсинга:** Отслеживание сообщений в очереди.

##### **Компоненты, которые нужно доработать:**
1. **Shop API:**
   - Добавить middleware для сбора трейсинг-данных.
2. **CRM API:**
   - Внедрить логирование статусов заказов с использованием OpenTelemetry.
3. **MES API:**
   - Интегрировать трейсинг для статусов производственного процесса.
4. **RabbitMQ:**
   - Настроить плагин трейсинга для мониторинга сообщений.
5. **Хранилище трейсинг-данных:**
   - Настроить Jaeger для хранения и анализа данных.

##### **Ссылки на доработанные диаграммы:**
- Ссылка на обновлённую C4-диаграмму с компонентами трейсинга: [Диаграмма 1](#)
- Ссылка на C4-диаграмму с автоматическим мониторингом: [Диаграмма 2](#)

---

#### **Компромиссы**

1. **Высокая стоимость внедрения:** Настройка трейсинга требует времени и ресурсов команды.
2. **Сложности интеграции:** Существующие компоненты могут не поддерживать нужные форматы метрик и трейсинга без доработок.
3. **Нагрузка на систему:** Сбор трейсинговых данных увеличивает потребление CPU и памяти.
4. **Ограничения проприетарных систем:** Некоторые сервисы могут быть труднодоступными для интеграции.

---

#### **Аспекты безопасности**

1. **Ограничение доступа:**
   - Доступ к системе трейсинга только для сотрудников с ролями "DevOps" и "Support".
2. **Аутентификация и авторизация:**
   - Использование SSO и ролей для входа в систему трейсинга.
3. **Шифрование данных:**
   - Все данные трейсинга шифруются при передаче и хранении.
4. **Маскирование данных:**
   - Исключение из трейсинга персональных данных пользователей.

---

#### **Автоматический мониторинг и алертинг**

1. **Мониторинг процессов:**
   - Создание дашбордов в Kibana для отслеживания пути заказов.
   - Автоматический анализ времени обработки заказов на каждом этапе.

2. **Алертинг:**
   - Настройка оповещений (Slack, Email) при превышении времени обработки или ошибках.

##### **Ссылки на обновлённую диаграмму:**
- Ссылка на доработанную C4-диаграмму с мониторингом и алертингом: [Диаграмма 3](#)

