### Архитектурное решение по логированию

#### **Мотивация**

В настоящее время диагностика ошибок и нестандартных ситуаций требует значительного времени и усилий. Причины:
1. Отсутствие систематического логирования затрудняет разбор причин инцидентов.
2. Специалисты поддержки вынуждены полагаться на описания проблем от клиентов.
3. Время на решение инцидентов увеличивается, что негативно сказывается на удовлетворённости клиентов и бизнесе.

Внедрение логирования позволит:
- Быстро находить причины ошибок в системе.
- Снизить нагрузку на поддержку.
- Улучшить стабильность системы за счёт своевременного устранения проблем.

Технические и бизнес-метрики, которые улучшатся:
1. **Среднее время устранения инцидентов:** Сокращение времени диагностики и исправления ошибок.
2. **Процент успешных операций:** Уменьшение числа инцидентов благодаря лучшей диагностике.
3. **Нагрузка на поддержку:** Снижение времени и усилий, необходимых для обработки жалоб.
4. **Доверие клиентов:** Увеличение NPS за счёт более стабильной работы.
5. **Качество аналитики:** Возможность собирать данные для оптимизации бизнес-процессов.

---

#### **Системы для настройки логирования**

На основании анализа системы и C4-диаграммы, логирование необходимо настроить в следующих системах:
1. **Shop API:** Регистрация всех запросов на изменение статусов заказов (INITIATED, FILE_UPLOADED, SUBMITTED).
2. **CRM API:** Логирование всех операций по изменению статусов заказов (MANUFACTURING_APPROVED, CLOSED).
3. **MES API:** Логирование производственных процессов (PRICE_CALCULATED, MANUFACTURING_STARTED, MANUFACTURING_COMPLETED, PACKAGING, SHIPPED).
4. **RabbitMQ:** Логирование всех отправленных и принятых сообщений между компонентами.
5. **3D Files Storage:** Логирование загрузки и обработки файлов.

---

#### **Уровни логирования**

- **INFO:**
  - Изменение статусов заказов.
  - Таймстемпы операций.
  - ID пользователя, ID заказа.

- **DEBUG:**
  - Включается в dev-окружении для детального анализа.
  - Записывает параметры запросов и ответы.

- **ERROR:**
  - Фиксация ошибок, включая код и описание.
  - Время возникновения ошибки, связанный запрос/сообщение.

- **WARN:**
  - Потенциальные проблемы (например, превышение времени обработки сообщений).

---

#### **Данные для логирования**

1. **Shop API:**
   - Статусы заказов: INITIATED, FILE_UPLOADED, SUBMITTED.
   - ID пользователя, ID заказа.
   - Время изменения статуса.

2. **CRM API:**
   - Операции: MANUFACTURING_APPROVED, CLOSED.
   - Таймстемпы операций.
   - ID клиента, ID заказа.

3. **MES API:**
   - Производственные статусы: PRICE_CALCULATED, MANUFACTURING_STARTED, MANUFACTURING_COMPLETED, PACKAGING, SHIPPED.
   - ID оператора, ID заказа.
   - Время начала и завершения операций.

4. **RabbitMQ:**
   - ID сообщения, отправитель, получатель.
   - Время отправки и получения.
   - Статус доставки (успех/ошибка).

5. **3D Files Storage:**
   - Размер файлов, тип файлов.
   - Таймстемп загрузки.
   - ID заказа.

---

#### **Предлагаемое решение**

##### **Технологии для реализации логирования:**
1. **Elasticsearch + Logstash + Kibana (ELK):** Централизованное хранение и анализ логов.
2. **Filebeat:** Сбор логов с сервисов.
3. **Logback:** Настройка логирования в приложениях (Java).
4. **Serilog:** Логирование для приложений на C#.

##### **Компоненты для доработки:**
1. **Shop API:**
   - Внедрение middleware для сбора и отправки логов в Logstash.
2. **CRM API:**
   - Настройка Logback для формирования структурированных логов.
3. **MES API:**
   - Интеграция с Serilog для записи логов в JSON-формате.
4. **RabbitMQ:**
   - Настройка логирования в плагине для записи сообщений в центральное хранилище.
5. **3D Files Storage:**
   - Добавление логирования операций загрузки.

##### **Ссылки на обновлённую диаграмму:**
- Ссылка на диаграмму с настройками логирования: [Диаграмма 1](#)

---

#### **Политика безопасности**

1. **Ограничение доступа:**
   - Доступ к логам предоставляется только сотрудникам с ролями "Support" и "DevOps".
2. **Маскирование данных:**
   - Исключение из логов персональных данных клиентов (PII).
3. **Шифрование:**
   - Логи шифруются при передаче (TLS) и хранении.
4. **Аудит доступа:**
   - Логирование всех обращений к системе логирования.

---

#### **Политика хранения**

1. **Срок хранения:**
   - Логи INFO: 90 дней.
   - Логи DEBUG: 7 дней (только в dev).
   - Логи ERROR: 180 дней.
2. **Объём хранения:**
   - Разделение индексов по системам (Shop API, CRM API, MES API).
   - Ротация индексов при достижении 100 ГБ.

---

#### **Мероприятия по анализу логов**

1. **Алертинг:**
   - Настройка оповещений при частых ошибках (Slack, Email).
   - Оповещения о превышении времени обработки заказов.

2. **Аномалии:**
   - Поиск аномалий, например, резкое увеличение числа операций.

---

#### **Критерии выбора технологии для логов**

| Критерий           | ELK                | OpenSearch        | Splunk            | Graylog           |
|--------------------|--------------------|-------------------|-------------------|-------------------|
| Лицензия          | Elastic License    | Apache 2.0        | Проприетарная     | Open Source       |
| Масштабируемость  | Высокая            | Высокая           | Очень высокая     | Средняя           |
| Стоимость         | Средняя            | Низкая            | Высокая           | Низкая            |
| Интеграция        | Простая            | Простая           | Сложная           | Простая           |
| Поддержка         | Широкая            | Широкая           | Отличная          | Ограниченная      |

На основании этих критериев рекомендуется использовать **ELK** как наиболее сбалансированное решение.

