### Архитектурное решение по кешированию

#### **Мотивация**

MES-система испытывает проблемы с производительностью. Операторы и клиенты жалуются на низкую скорость работы страниц и долгую обработку заказов. Основные проблемы:
1. **Низкая скорость загрузки страниц для операторов:** Большое количество запросов к базе данных замедляет работу интерфейса.
2. **Долгая обработка заказов:** Серверы перегружаются из-за повторяющихся запросов на получение неизменяемых данных.

Внедрение кеширования позволит:
- Ускорить загрузку страниц операторов и клиентов.
- Уменьшить нагрузку на базу данных.
- Сократить время обработки заказов.

Элементы системы, которые планируется включить в кеширование:
1. **Список заказов:** Часто запрашиваемые данные, которые редко изменяются.
2. **Детали заказа:** Структурированная информация, которую операторы часто просматривают.
3. **Производственные статусы:** Данные о текущем состоянии обработки заказов.

---

#### **Предлагаемое решение**

##### **Тип кеширования:**
1. **Серверное кеширование** будет использоваться, так как:
   - Оно снижает нагрузку на базу данных.
   - Обеспечивает доступ к актуальным данным через централизованное управление кешем.

##### **Выбранный паттерн кеширования:**
1. **Cache-Aside:**
   - **Описание:** Данные сначала ищутся в кеше, при отсутствии загружаются из базы данных и записываются в кеш.
   - **Причины выбора:**
     - Гибкость управления кешем.
     - Подходит для данных, которые изменяются нерегулярно.
   - **Почему не Write-Through:** Создаёт избыточную нагрузку на кеш при записи данных.
   - **Почему не Refresh-Ahead:** Более сложен в реализации и увеличивает использование ресурсов.

##### **Диаграмма последовательности действий (Sequence Diagram):**
1. **Операция чтения списка заказов:**
   - Клиент запрашивает список заказов.
   - Сервер проверяет наличие данных в кеше.
   - Если данные есть, возвращает их клиенту.
   - Если данных нет, сервер запрашивает их из базы, сохраняет в кеш и возвращает клиенту.
2. **Операция изменения статуса заказа:**
   - Клиент отправляет запрос на изменение статуса.
   - Сервер обновляет статус в базе данных.
   - Сервер сбрасывает связанные данные в кеше.

_Диаграмма будет представлена отдельным файлом с описанием всех сущностей._

##### **Стратегия инвалидации кеша:**
- **По ключу (Key-Based Invalidation):**
  - При изменении заказа сбрасываются только данные, связанные с его ID.
  - **Почему:** Локализованное воздействие на кеш позволяет минимизировать количество удаляемых данных.
  
- **Временная инвалидация (Time-Based):**
  - Устанавливается TTL (time-to-live) для часто запрашиваемых данных, таких как список заказов.
  - **Почему:** Обеспечивает обновление данных через определённые интервалы времени без дополнительных действий.

##### **Сравнение стратегий:**
| Стратегия                | Преимущества                           | Недостатки                          |
|--------------------------|----------------------------------------|-------------------------------------|
| По ключу                 | Быстрая и локализованная инвалидация   | Требует точной настройки            |
| Временная инвалидация    | Простота реализации, предсказуемость   | Данные могут устареть до инвалидации|
| Программная инвалидация  | Полный контроль над инвалидацией       | Сложна в реализации                 |

Рекомендуется использовать комбинацию **по ключу** и **временной инвалидации** для повышения эффективности.

---

#### **Возможные технологии для кеширования:**
1. **Redis:**
   - Высокая производительность, поддержка TTL и удобство работы с ключами.
   - Простая интеграция с Java и C#.
2. **Memcached:**
   - Лёгкость и простота в использовании.
   - Подходит для временных данных, но не поддерживает сложные структуры данных.

_Выбор: Redis, так как он более гибок и поддерживает широкий спектр функциональности._

##### **Компоненты для доработки:**
1. **MES API:**
   - Добавить интеграцию с Redis для работы с кешем.
2. **CRM API:**
   - Реализовать инвалидацию кеша при обновлении данных.
3. **Shop API:**
   - Настроить временное кеширование для часто запрашиваемых данных.

---

#### **Заключение**

Реализация серверного кеширования с использованием Redis и паттерна Cache-Aside позволит значительно улучшить производительность системы, снизить нагрузку на базу данных и обеспечить более быстрый пользовательский опыт. Комбинация инвалидации по ключу и временной инвалидации обеспечит актуальность данных при минимальных затратах ресурсов.

